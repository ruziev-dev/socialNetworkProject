{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.ts","utils/object-helpers.js","redux/users-reduser.ts","assets/images/preloader.gif","components/common/Preloader/Preloader.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","serviceWorker.js","components/Navbar/Navbar.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","redux/app-reducer.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","App.js","index.js","redux/auth-reducer.ts","components/common/Preloader/preloader.js","components/common/Avatar/Avatar.js","components/Profile/MyPosts/MyPosts.module.css","utils/validators/validators.js","assets/images/defaultAvatar.png","components/Header/Header.module.css","components/common/Avatar/Ava.module.css","components/common/FormsControl/FormsControls.module.css","components/common/FormsControl/FormsControls.js"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","id","post","resultCode","unfollow","delete","getProfile","userId","console","log","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","ResultCodeEnum","authAPI","me","res","login","email","password","rememberMe","captcha","logout","initialState","dialogs","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getState","a","count","totalCount","_followUnfollowFlow","apiMethod","actionCreator","bind","usersReducer","followed","filter","module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","activeLink","Header","props","header","src","loginBlock","isAuth","onClick","HeaderContainer","React","Component","render","this","connect","auth","initialized","appReducer","posts","likesCount","newPostText","setStatus","setProfile","profileReducer","newPost","photos","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebarPage","usersPage","authReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","WithSuspense","Suspense","fallback","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","isOwner","value","defaultValue","onChange","e","currentTarget","autoFocus","onBlur","ProfileDataFormReduxForm","reduxForm","profileDescription","onSubmit","handleSubmit","formMain","formChild","error","formSummaryError","Field","component","Object","keys","contacts","key","contactItem","placeholder","Contact","contactTitle","contactValue","ProfileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","descriptionBlock","ava","isLarge","target","files","length","accept","initialValues","Post","likes","setLikes","maxLenght10","maxLenghtCreator","MyPosts","memo","postsElements","reverse","p","postsBlock","AddNewPostFormRedux","addPost","Textarea","validate","required","textarea","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","refreshProfile","params","autorizedUserId","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","file","stopSubmit","_error","Promise","reject","withRouter","DialogsContainer","lazy","UsersContainer","LoginPage","App","initializeApp","exact","path","align","AppContainer","promise1","getAuthUserData","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","captchaUrl","setAuthUserData","payload","meData","Success","loginData","CaptchaIsRequired","getCaptcha","url","Preloader","preloader","Ava","large","small","userPhoto","maxLenght","FormControl","input","meta","child","hasError","touched","formControl","children","restProps","Input"],"mappings":"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","file":"static/js/main.84f2ade1.chunk.js","sourcesContent":["//import * as axios from \"axios\";\r\nimport axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"f639bb76-26f6-4a9e-bbc4-351a0c148c4d\"\r\n    }\r\n});\r\n\r\n export const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => {\r\n            return response.data;\r\n        });\r\n    },\r\n\r\n     follow (id: number) {\r\n         return instance.post(`follow/${id}`,).then(response => {\r\n             return response.data.resultCode;\r\n         });\r\n     },\r\n\r\n     unfollow (id: number) {\r\n         return instance.delete(`follow/${id}`,).then(response => {\r\n             return response.data.resultCode;\r\n         });\r\n     },\r\n\r\n     getProfile(userId: number){\r\n        console.log('Obsolete method. Please use ProfileAPI')\r\n         return profileAPI.getProfile(userId);\r\n     }\r\n\r\n}\r\nexport const profileAPI = {\r\n\r\n     getProfile(userId: number){\r\n         return instance.get(`profile/${userId}`);\r\n     },\r\n\r\n    getStatus(userId: number){\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n\r\n    updateStatus(status: string){\r\n        return instance.put(`profile/status`,{ status: status});\r\n\r\n    },\r\n\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile);\r\n     }\r\n\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n     Success = 0,\r\n     Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: { id: number, email: string, login: string }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: { UserId: number}\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data);\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe  = false, captcha: null | string = null){\r\n        return instance.post<LoginResponseType>('auth/login', { email, password, rememberMe, captcha })\r\n            .then(res => res.data)\r\n    },\r\n\r\n    logout(){\r\n        return instance.delete('auth/login');\r\n    },\r\n\r\n    captcha(){\r\n        return instance.get('security/get-captcha-url');\r\n    }\r\n}\r\n\r\n","const SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Димон'},\r\n        {id: 2, name: 'Катя'},\r\n        {id: 3, name: 'Андрей'},\r\n        {id: 4, name: 'Елизавета'},\r\n        {id: 5, name: 'Света'},\r\n        {id: 6, name: 'Валера'},\r\n        {id: 7, name: 'Саша'},\r\n        {id: 8, name: 'Витёк'},\r\n        {id: 9, name: 'Евгений'},\r\n        {id: 10, name: 'Евгения'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Привет!'},\r\n        {id: 2, message: 'Эти сообщения хранятся в стэйте и не уходят на сервер'},\r\n        {id: 3, message: 'Максимально допустимый размер сообщения 50 символов'}\r\n    ] as Array<MessagesType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState,\r\n                        action: any):InitialStateType => {\r\n\r\n   switch (action.type) {\r\n      case SEND_MESSAGE:\r\n           let body = action.newMessageBody;\r\n           return {\r\n               ...state,\r\n               messages: [ ...state.messages,{id: 4, message: body} ]\r\n           };\r\n\r\n\r\n       default:\r\n           return state;\r\n   }\r\n}\r\n\r\ntype SendMessageCreatorActionType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody:string):SendMessageCreatorActionType =>\r\n    ({type: SEND_MESSAGE, newMessageBody})\r\n\r\n\r\nexport default dialogsReducer","\r\nexport const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true} )\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false} )\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = FollowSuccessActionType | UnfollowSuccessActionType | SetUsersActionType |\r\n    SetCurrentPageActionType | SetTotalUsersCountActionType | ToggleIsFetchingActionType |\r\n    ToggleFollowingProgressActionType\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId})\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number):UnfollowSuccessActionType => ({type: UNFOLLOW, userId})\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>):SetUsersActionType => ({type: SET_USERS, users})\r\n\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number):SetCurrentPageActionType =>\r\n    ({type: SET_CURRENT_PAGE, currentPage})\r\n\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number):SetTotalUsersCountActionType =>\r\n    ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\n\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean):ToggleIsFetchingActionType =>\r\n    ({type: TOGGLE_IS_FETCHING, isFetching})\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number):ToggleFollowingProgressActionType =>\r\n    ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionsTypes>\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (userId:number)=> FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer","module.exports = __webpack_public_path__ + \"static/media/preloader.ba787be4.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__18qag\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2InU3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"picture\":\"ProfileInfo_picture__1wMHM\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Q-eM\",\"ava\":\"ProfileInfo_ava__KX1SO\",\"profileDescription\":\"ProfileInfo_profileDescription__1rhUw\",\"contactItem\":\"ProfileInfo_contactItem__2DVqY\",\"formSummaryError\":\"ProfileInfo_formSummaryError__M76sE\",\"formMain\":\"ProfileInfo_formMain__WyRc_\",\"formChild\":\"ProfileInfo_formChild__19iKl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__344Sk\",\"item\":\"Navbar_item__3pjw5\",\"activeLink\":\"Navbar_activeLink__1kvqt\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>- Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>- Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>- Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.seekpng.com/png/full/872-8723815_digital-marketing-services-digital-marketing-png-icons.png' />\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login}<br/> <button onClick={props.logout}>Log out</button></div>\r\n                :<NavLink to={'/login'}>Login</NavLink>\r\n            }\r\n         </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux';\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n    render () {\r\n        return <Header {...this.props} />\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login \r\n});\r\nexport default connect(mapStateToProps,{logout})(HeaderContainer);\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = ():InitializedSuccessActionType => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise1 = dispatch(getAuthUserData());\r\n    //let promise2 = dispatch(setProfile());\r\n    //dispatch(somethingelse());\r\n    Promise.all([promise1/*, promise2*/])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\nconst SEND_PROFILE_INFO = 'SEND_PROFILE_INFO';\r\n\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Привет мир! Это мой первый пост!', likesCount: 12},\r\n        {id: 2, message: 'Как дела?', likesCount: 11},\r\n        {id: 3, message: 'Бла бла...', likesCount: 11},\r\n        {id: 4, message: 'Oh myyy...', likesCount: 3},\r\n        {id: 5, message: 'Максимальная длина поста ограничена 100 символами', likesCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: any):InitialStateType => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 6,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({type: ADD_POST, newPostText})\r\n\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType):SetUserProfileType => ({type: SET_USER_PROFILE, profile})\r\n\r\ntype SetStatusType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string):SetStatusType => ({type: SET_STATUS, status})\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType):SavePhotoSuccessType => ({type: SAVE_PHOTO_SUCCESS, photos})\r\nexport const sendProfileInfo = (photos: PhotosType) => ({type: SEND_PROFILE_INFO})\r\n\r\n\r\n\r\nexport const getStatus = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        profileAPI.getStatus(userId).then((response: any) => {\r\n            dispatch(setStatus(response.data));\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: any) => {\r\n        profileAPI.updateStatus(status)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0){\r\n                    dispatch(setStatus(status));\r\n                }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const setProfile = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        usersAPI.getProfile(userId)\r\n            .then((response: any) => {\r\n            dispatch(setUserProfile(response.data));\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\n\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    let response = await profileAPI.saveProfile(profile);\r\n    if (response.data.resultCode === 0) {\r\n       const userId =  getState().auth.userId\r\n        dispatch(setProfile(userId))\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\r\n        dispatch(stopSubmit(\"editProfile\", {_error: message}));\r\n        return Promise.reject();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default profileReducer;","let initialState = {};\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport dialogsReducer from \"./dialogs-reducer\"\r\nimport sidebarReducer from \"./sidebar-reducer\"\r\nimport usersReducer from \"./users-reduser\"\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\"\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage:   usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\n//let store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\n\r\nexport default store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/preloader\";\r\n\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<div><Preloader/></div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false );\r\n    let [status,setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner ? setEditMode(true) : setEditMode(false);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n        return (\r\n            <>\r\n                {!editMode &&\r\n                    <div>\r\n                        <i><span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span></i>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input value={status}\r\n                               defaultValue={status}\r\n                               onChange={onStatusChange}\r\n                               autoFocus={true}\r\n                               onBlur={deactivateEditMode}\r\n                        />\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    return <div className={s.profileDescription}>\r\n        <form onSubmit={props.handleSubmit} className={s.formMain}>\r\n            <div className={s.formChild}>\r\n\r\n                <button>Сохранить</button>\r\n                {props.error && <div className={s.formSummaryError}> {props.error}</div>}\r\n                <p><Field name=\"fullName\" component=\"input\" /></p>\r\n\r\n                <ProfileStatusWithHooks status={props.status} />\r\n\r\n                <p><b>Обо мне: </b></p>\r\n                <Field name=\"aboutMe\" component=\"textarea\" />\r\n                <br/>\r\n                <b>В поиске работы: </b>\r\n                <Field name=\"lookingForAJob\" component=\"input\" type=\"checkbox\"/>\r\n                <p><b>Скиллы: </b></p>\r\n                <Field name=\"lookingForAJobDescription\" component=\"textarea\"/>\r\n\r\n            </div>\r\n            <div className={s.formChild}>\r\n                <p><b>Контактная информация</b></p>\r\n                {Object.keys(props.profile.contacts).map(key => {\r\n                    return <div className={s.contactItem}>\r\n                        <b>{key}: </b><br/>\r\n                        <Field name={\"contacts.\" + key} component=\"input\" placeholder={key}/>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'editProfile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport Preloader from '../../common/Preloader/preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport Ava from \"../../common/Avatar/Avatar\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n\r\n                <div className={s.ava}>\r\n                    <Ava isLarge={true} photos={props.profile.photos}/>\r\n\r\n                    {props.isOwner &&\r\n                    <input type={\"file\"}\r\n                           onChange={onMainPhotoSelected}\r\n                           accept={\".jpg, .jpeg, .png\"}\r\n                    />\r\n                    }\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={props.profile} {...props} onSubmit={onSubmit}/>\r\n                    : <ProfileData {...props} setEditMode={setEditMode}/>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div><b>{contactTitle}: </b> {contactValue}</div>\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n    return <div className={s.profileDescription}>\r\n        <div>\r\n            {props.isOwner &&\r\n            <button onClick={() => {\r\n                props.setEditMode(true)\r\n            }}>Редактировать</button>}\r\n\r\n            <p><b>{props.profile.fullName}</b></p>\r\n\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner}/>\r\n\r\n            <p><b>Обо мне: </b>{props.profile.aboutMe}</p>\r\n            <b>В поиске работы: </b>{props.profile.lookingForAJob\r\n            ? \"да\"\r\n            : \"нет\"}\r\n            <br/>\r\n            {props.profile.lookingForAJob\r\n                ? <p><b>Скиллы: </b> {props.profile.lookingForAJobDescription}</p>\r\n                : null}\r\n            <div>\r\n                <p><b>Контактная информация</b></p>\r\n                {Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React, {useState} from 'react';\r\nimport s from './Post.module.css';\r\nimport Ava from \"../../../common/Avatar/Avatar\";\r\n\r\nconst Post = (props) => {\r\n    let [likes, setLikes] = useState(props.likesCount)\r\n    return (\r\n        <div className={s.item}>\r\n            <Ava isLarge={false} photos={props.photos}/>\r\n            {props.message}\r\n            <div>\r\n                <button onClick={() => setLikes(likes + 1)}>Like {likes}</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLenghtCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControls\";\r\n\r\nconst maxLenght10 = maxLenghtCreator(100);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n    let onAddPost = (value) => {\r\n        props.addPost(value.newPostText)\r\n        value.newPostText = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>Мои посты:</h3>\r\n            {props.isOwner && <AddNewPostFormRedux onSubmit={onAddPost}/>}\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                       type=\"text\" validate={[required, maxLenght10]}\r\n                       placeholder=\"Введите текст нового поста\"\r\n                       className={s.textarea}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Опубликовать</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         isOwner={props.isOwner}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n\r\n            />\r\n            <MyPostsContainer isOwner={props.isOwner}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {setProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile(){\r\n        let userId=this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId){\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.setProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId){\r\n            this.refreshProfile();\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     status={this.props.status} updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n\r\n    })\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setProfile,updateStatus,getStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n //   withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Switch, HashRouter, Route, withRouter} from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/preloader\";\r\nimport store from \"./redux/redux-store\";\r\nimport {WithSuspense} from \"./hoc/withSuspense\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport ProfileContainer  from'./components/Profile/ProfileContainer'\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer' ));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer' ));\r\nconst LoginPage = React.lazy(() => import('./components/Login/Login' ));\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={ () => <Redirect to={\"/profile\"}/> }/>\r\n\r\n                        <Route path='/dialogs'\r\n                               render={WithSuspense(DialogsContainer)}/>\r\n\r\n                        <Route path='/profile/:userId?'\r\n                               render={() =>{return <ProfileContainer/>}}/>\r\n\r\n                        <Route path='/users'\r\n                               render={WithSuspense(UsersContainer)}/>\r\n\r\n                        <Route path='/login'\r\n                               render={WithSuspense(LoginPage)}/>\r\n\r\n                        <Route path='/*'\r\n                               render={() => <h1 align=\"center\">404 NOT FOUND</h1>}/>\r\n                    </Switch>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n    return <HashRouter /*basename={process.env.PUBLIC_URL}*/>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport SamuraiJSApp from \"./App\";\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import {authAPI, ResultCodeEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst SET_CAPTCHA_URL = 'samurai-network/auth/SET_CAPTCHA_URL';\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.url\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataActionPayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean):\r\n    SetAuthUserDataActionType =>\r\n    ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\r\n\r\n\r\ntype SetCaptchaUrlActionType = {\r\n    type: typeof SET_CAPTCHA_URL\r\n    url: string\r\n}\r\n\r\nexport const setCaptchaUrl = (url:string): SetCaptchaUrlActionType =>\r\n    ({type: SET_CAPTCHA_URL, url})\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe,captcha)\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else if (loginData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\r\n        dispatch(stopSubmit(\"login\", {_error: 'Введите символы, изображенные на картинке'}))\r\n        dispatch(getCaptcha())\r\n    } else {\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some Error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n\r\n}\r\n\r\nexport const getCaptcha = () => async (dispatch: any) => {\r\n    const response = await authAPI.captcha()\r\n    const captchaUrl = response.data.url\r\n    dispatch(setCaptchaUrl(captchaUrl))\r\n}\r\n\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n}\r\n\r\nexport default authReducer;","import React from 'react'\r\nimport preloader from \"../../../assets/images/preloader.gif\";\r\nimport s from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n\r\n    return <div className={s.preloader}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import React from 'react';\r\nimport userPhoto from \"../../../assets/images/defaultAvatar.png\";\r\nimport s from './Ava.module.css'\r\n\r\nexport const Ava = (props) => {\r\n    return <img className={props.isLarge ? s.large : s.small}\r\n                src={props.photos ? props.photos.large ? props.photos.large : userPhoto : userPhoto}/>\r\n\r\n}\r\n\r\nexport default Ava","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3C4Tv\",\"posts\":\"MyPosts_posts__Cs4U3\",\"textarea\":\"MyPosts_textarea__3DRvC\"};","\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Обязательное поле\";\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght) => (value) => {\r\n    if (value.length > maxLenght) return `Длина сообщения более ${maxLenght} символов`;\r\n    return undefined;\r\n}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b0ec8d5b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3aull\",\"loginBlock\":\"Header_loginBlock__3PCQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"large\":\"Ava_large__dBYIf\",\"small\":\"Ava_small__2kmyX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1sK3C\",\"error\":\"FormsControls_error__2SmPG\"};","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return(\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}> <textarea {...props.input} {...restProps} /> </FormControl>\r\n}\r\n\r\n\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}> <input {...props.input} {...restProps} /> </FormControl>\r\n}"],"sourceRoot":""}